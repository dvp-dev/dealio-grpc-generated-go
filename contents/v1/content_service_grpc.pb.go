// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package contents_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	CampaignDealGetOne(ctx context.Context, in *CampaignDealGetOneRequest, opts ...grpc.CallOption) (*CampaignDealGetOneResponse, error)
	CampaignDealGetMultiple(ctx context.Context, in *CampaignDealGetMultipleRequest, opts ...grpc.CallOption) (ContentService_CampaignDealGetMultipleClient, error)
	CampaignDealCreate(ctx context.Context, in *CampaignDealCreateRequest, opts ...grpc.CallOption) (*CampaignDealCreateResponse, error)
	CampaignDealUpdate(ctx context.Context, in *CampaignDealUpdateRequest, opts ...grpc.CallOption) (*CampaignDealUpdateResponse, error)
	BlogGetList(ctx context.Context, in *BlogGetListRequest, opts ...grpc.CallOption) (ContentService_BlogGetListClient, error)
	BlogGetOne(ctx context.Context, in *BlogGetOneRequest, opts ...grpc.CallOption) (*BlogGetOneResponse, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) CampaignDealGetOne(ctx context.Context, in *CampaignDealGetOneRequest, opts ...grpc.CallOption) (*CampaignDealGetOneResponse, error) {
	out := new(CampaignDealGetOneResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/CampaignDealGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CampaignDealGetMultiple(ctx context.Context, in *CampaignDealGetMultipleRequest, opts ...grpc.CallOption) (ContentService_CampaignDealGetMultipleClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContentService_ServiceDesc.Streams[0], "/contents.v1.ContentService/CampaignDealGetMultiple", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentServiceCampaignDealGetMultipleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContentService_CampaignDealGetMultipleClient interface {
	Recv() (*CampaignDealGetMultipleResponse, error)
	grpc.ClientStream
}

type contentServiceCampaignDealGetMultipleClient struct {
	grpc.ClientStream
}

func (x *contentServiceCampaignDealGetMultipleClient) Recv() (*CampaignDealGetMultipleResponse, error) {
	m := new(CampaignDealGetMultipleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentServiceClient) CampaignDealCreate(ctx context.Context, in *CampaignDealCreateRequest, opts ...grpc.CallOption) (*CampaignDealCreateResponse, error) {
	out := new(CampaignDealCreateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/CampaignDealCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CampaignDealUpdate(ctx context.Context, in *CampaignDealUpdateRequest, opts ...grpc.CallOption) (*CampaignDealUpdateResponse, error) {
	out := new(CampaignDealUpdateResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/CampaignDealUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) BlogGetList(ctx context.Context, in *BlogGetListRequest, opts ...grpc.CallOption) (ContentService_BlogGetListClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContentService_ServiceDesc.Streams[1], "/contents.v1.ContentService/BlogGetList", opts...)
	if err != nil {
		return nil, err
	}
	x := &contentServiceBlogGetListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContentService_BlogGetListClient interface {
	Recv() (*BlogGetListResponseStream, error)
	grpc.ClientStream
}

type contentServiceBlogGetListClient struct {
	grpc.ClientStream
}

func (x *contentServiceBlogGetListClient) Recv() (*BlogGetListResponseStream, error) {
	m := new(BlogGetListResponseStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentServiceClient) BlogGetOne(ctx context.Context, in *BlogGetOneRequest, opts ...grpc.CallOption) (*BlogGetOneResponse, error) {
	out := new(BlogGetOneResponse)
	err := c.cc.Invoke(ctx, "/contents.v1.ContentService/BlogGetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	CampaignDealGetOne(context.Context, *CampaignDealGetOneRequest) (*CampaignDealGetOneResponse, error)
	CampaignDealGetMultiple(*CampaignDealGetMultipleRequest, ContentService_CampaignDealGetMultipleServer) error
	CampaignDealCreate(context.Context, *CampaignDealCreateRequest) (*CampaignDealCreateResponse, error)
	CampaignDealUpdate(context.Context, *CampaignDealUpdateRequest) (*CampaignDealUpdateResponse, error)
	BlogGetList(*BlogGetListRequest, ContentService_BlogGetListServer) error
	BlogGetOne(context.Context, *BlogGetOneRequest) (*BlogGetOneResponse, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) CampaignDealGetOne(context.Context, *CampaignDealGetOneRequest) (*CampaignDealGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampaignDealGetOne not implemented")
}
func (UnimplementedContentServiceServer) CampaignDealGetMultiple(*CampaignDealGetMultipleRequest, ContentService_CampaignDealGetMultipleServer) error {
	return status.Errorf(codes.Unimplemented, "method CampaignDealGetMultiple not implemented")
}
func (UnimplementedContentServiceServer) CampaignDealCreate(context.Context, *CampaignDealCreateRequest) (*CampaignDealCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampaignDealCreate not implemented")
}
func (UnimplementedContentServiceServer) CampaignDealUpdate(context.Context, *CampaignDealUpdateRequest) (*CampaignDealUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CampaignDealUpdate not implemented")
}
func (UnimplementedContentServiceServer) BlogGetList(*BlogGetListRequest, ContentService_BlogGetListServer) error {
	return status.Errorf(codes.Unimplemented, "method BlogGetList not implemented")
}
func (UnimplementedContentServiceServer) BlogGetOne(context.Context, *BlogGetOneRequest) (*BlogGetOneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlogGetOne not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_CampaignDealGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignDealGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CampaignDealGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/CampaignDealGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CampaignDealGetOne(ctx, req.(*CampaignDealGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CampaignDealGetMultiple_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CampaignDealGetMultipleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContentServiceServer).CampaignDealGetMultiple(m, &contentServiceCampaignDealGetMultipleServer{stream})
}

type ContentService_CampaignDealGetMultipleServer interface {
	Send(*CampaignDealGetMultipleResponse) error
	grpc.ServerStream
}

type contentServiceCampaignDealGetMultipleServer struct {
	grpc.ServerStream
}

func (x *contentServiceCampaignDealGetMultipleServer) Send(m *CampaignDealGetMultipleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContentService_CampaignDealCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignDealCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CampaignDealCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/CampaignDealCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CampaignDealCreate(ctx, req.(*CampaignDealCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CampaignDealUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CampaignDealUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CampaignDealUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/CampaignDealUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CampaignDealUpdate(ctx, req.(*CampaignDealUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_BlogGetList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlogGetListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContentServiceServer).BlogGetList(m, &contentServiceBlogGetListServer{stream})
}

type ContentService_BlogGetListServer interface {
	Send(*BlogGetListResponseStream) error
	grpc.ServerStream
}

type contentServiceBlogGetListServer struct {
	grpc.ServerStream
}

func (x *contentServiceBlogGetListServer) Send(m *BlogGetListResponseStream) error {
	return x.ServerStream.SendMsg(m)
}

func _ContentService_BlogGetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlogGetOneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).BlogGetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contents.v1.ContentService/BlogGetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).BlogGetOne(ctx, req.(*BlogGetOneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contents.v1.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CampaignDealGetOne",
			Handler:    _ContentService_CampaignDealGetOne_Handler,
		},
		{
			MethodName: "CampaignDealCreate",
			Handler:    _ContentService_CampaignDealCreate_Handler,
		},
		{
			MethodName: "CampaignDealUpdate",
			Handler:    _ContentService_CampaignDealUpdate_Handler,
		},
		{
			MethodName: "BlogGetOne",
			Handler:    _ContentService_BlogGetOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CampaignDealGetMultiple",
			Handler:       _ContentService_CampaignDealGetMultiple_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BlogGetList",
			Handler:       _ContentService_BlogGetList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "contents/v1/content_service.proto",
}
